#!/usr/bin/env python3
"""
Cineo AI - API Key Setup Assistant
This script helps you configure your API keys for the Cineo AI platform.
"""

import os
import sys
import webbrowser
from pathlib import Path

def print_header():
    print("üé¨ Cineo AI - API Key Setup Assistant")
    print("=" * 50)
    print("This assistant will help you configure your API keys for:")
    print("‚Ä¢ OpenRouter (Script Generation)")
    print("‚Ä¢ Stability AI (Image Generation)")
    print("‚Ä¢ ElevenLabs (Audio Generation)")
    print("‚Ä¢ RunwayML (Video Generation)")
    print()

def open_api_websites():
    """Open API key websites in browser"""
    print("üåê Opening API key websites...")

    api_sites = {
        "OpenRouter": "https://openrouter.ai/keys",
        "Stability AI": "https://platform.stability.ai/account/keys",
        "ElevenLabs": "https://elevenlabs.io/app/settings/api-keys",
        "RunwayML": "https://app.runwayml.com/api-keys",
        "Stripe": "https://dashboard.stripe.com/test/apikeys"
    }

    for name, url in api_sites.items():
        print(f"Opening {name}: {url}")
        try:
            webbrowser.open(url)
        except:
            print(f"  (Could not open automatically - visit: {url})")

    print()

def get_api_key(service_name, description, required=False):
    """Get API key from user input"""
    print(f"üîë {service_name} API Key")
    print(f"   {description}")
    key = input(f"   Enter your {service_name} API key (or press Enter to skip): ").strip()

    if required and not key:
        print(f"   ‚ö†Ô∏è  {service_name} API key is required for full functionality")
        return get_api_key(service_name, description, required)

    return key if key else None

def create_env_file():
    """Create the .env file with user inputs"""
    print("\nüìù Creating .env file...")

    # Get API keys
    openrouter_key = get_api_key(
        "OpenRouter",
        "Used for AI script generation with Grok-4",
        required=True
    )

    stability_key = get_api_key(
        "Stability AI",
        "Used for scene storyboards and movie posters",
        required=True
    )

    elevenlabs_key = get_api_key(
        "ElevenLabs",
        "Used for character dialogue and audio",
        required=True
    )

    runway_key = get_api_key(
        "RunwayML",
        "Used for video generation (optional)",
        required=False
    )

    # Generate JWT secret
    import secrets
    jwt_secret = secrets.token_hex(32)
    print(f"üîê Generated JWT secret: {jwt_secret[:16]}...")

    # Create .env content
    env_content = f'''# Cineo AI - Backend Environment Variables
# Generated by setup assistant on {os.date.today().strftime("%Y-%m-%d")}

# ===================================
# DATABASE CONFIGURATION
# ===================================
DATABASE_URL=postgresql://user:password@localhost:5432/cineo_db

# ===================================
# JWT AUTHENTICATION
# ===================================
SECRET_KEY={jwt_secret}
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# ===================================
# REDIS CONFIGURATION
# ===================================
REDIS_URL=redis://localhost:6379

# ===================================
# AI API KEYS
# ===================================

# OpenRouter API - For script generation with Grok AI
OPENROUTER_API_KEY={openrouter_key or "your_openrouter_api_key_here"}

# Stability AI - For image/storyboard generation
STABILITY_API_KEY={stability_key or "your_stability_ai_api_key_here"}

# ElevenLabs - For text-to-speech and audio
ELEVENLABS_API_KEY={elevenlabs_key or "your_elevenlabs_api_key_here"}

# RunwayML - For video generation (Optional)
RUNWAY_API_KEY={runway_key or "your_runway_ml_api_key_here"}

# ===================================
# DEVELOPMENT SETTINGS
# ===================================
DEBUG=True
LOG_LEVEL=INFO

# ===================================
# FRONTEND CONFIGURATION
# ===================================
FRONTEND_URL=http://localhost:3000
ALLOWED_ORIGINS=["http://localhost:3000", "http://127.0.0.1:3000"]
'''

    # Write to .env file
    with open('.env', 'w') as f:
        f.write(env_content)

    print("‚úÖ .env file created successfully!")

def create_frontend_env():
    """Create frontend .env.local file"""
    print("\nüé® Creating frontend environment file...")

    frontend_env_content = '''# Frontend Environment Variables
NEXT_PUBLIC_API_URL=http://localhost:8000

# Add your API keys here if needed
# OPENROUTER_API_KEY=your_openrouter_api_key
# STABILITY_API_KEY=your_stability_api_key
'''

    frontend_env_path = Path("../frontend/.env.local")
    with open(frontend_env_path, 'w') as f:
        f.write(frontend_env_content)

    print("‚úÖ Frontend .env.local file created successfully!")

def main():
    """Main setup function"""
    print_header()

    # Check if .env already exists
    if os.path.exists('.env'):
        overwrite = input("‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): ").lower().strip()
        if overwrite != 'y':
            print("Setup cancelled. Your existing .env file is preserved.")
            return

    # Open API websites
    open_api_websites()

    # Get user input and create files
    create_env_file()
    create_frontend_env()

    print("\n" + "=" * 50)
    print("üéâ Setup Complete!")
    print("=" * 50)
    print("Your API keys have been configured!")
    print("\nüìã Next Steps:")
    print("1. Verify your API keys are working")
    print("2. Start the platform:")
    print("   - Backend: python main.py")
    print("   - Frontend: cd ../frontend && npm run dev")
    print("   - Celery: celery -A main.celery_app worker --loglevel=info")
    print("\nüåê Access at: http://localhost:3000")
    print("\nüí° Tips:")
    print("- Without API keys: Platform uses mock data (demo mode)")
    print("- With API keys: Full AI functionality enabled")
    print("- All API keys are optional except for basic functionality")

if __name__ == "__main__":
    main()
